import tkinter as tk

root = tk.Tk()
root.resizable(False, False)
root.title("Tic Tac Toe")

#tk.Label(root,text="Tic Tac Toe", font=('Ariel',25)).pack()
status_label = tk.Label(root,text="", font='Ariel 15 bold', bg = "green",fg='snow')
status_label.pack(fill=tk.X) # метка растягивается по ширине экрана
play_area = tk.Frame(root,width=300, height=300,bg = 'white') #создание контейнера в котором будут храниться виджеты
X_points = []
O_points = []
XO_points = []

current_char = "X"

class XOPoint:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.value = None  # для хранения информации о точке, занята она или нет "X O"
        self.button = tk.Button(play_area,text="", width=10, height=5, command=self.set) #кнопка, которая будет храниться в контейнере
        self.button.grid(row=x, column=y)  #располагает кнопку в сетке по координатам х и у

    def set(self):
        global current_char
        if not self.value:
            self.button.configure(text=current_char, bg='lightblue',fg='black')
            self.value = current_char
            if current_char == "X":
                X_points.append(self)
                current_char = "O"
                status_label.configure(text="O's turn")
            elif current_char == "O":
                O_points.append(self)
                current_char = "X"
                status_label.configure(text="X's turn")
        check_win()


    def reset(self):  # создание игрового поля
        self.button.configure(text="",bg='white') # настройка кнопки
        if self.value == "X":
            X_points.remove(self)
        elif self.value == "O":
            O_points.remove(self)
        self.value = None
for x in range(1, 4):
    for y in range(1,4):
        XO_points.append(XOPoint(x,y)) #создается экземпляр класса, чтобы создать поле 3*3


class WinningPossibility:
    def __init__(self, x1,y1,x2,y2,x3,y3):
        self.x1 = x1
        self.y1 = y1
        self.x2 = x2
        self.y2 = y2
        self.x3 = x3
        self.y3 = y3

    def check(self, for_char):
        p1_satisfied = False
        p2_satisfied = False
        p3_satisfied = False
        if for_char == 'X':
            for point in X_points:
                if point.x == self.x1 and point.y == self.y1:
                    p1_satisfied = True
                elif point.x == self.x2 and point.y == self.y2:
                    p2_satisfied = True
                elif point.x == self.x3 and point.y == self.y3:
                    p3_satisfied = True
        elif for_char == 'O':
            for point in O_points:
                if point.x == self.x1 and point.y == self.y1:
                    p1_satisfied = True
                elif point.x == self.x2 and point.y == self.y2:
                    p2_satisfied = True
                elif point.x == self.x3 and point.y == self.y3:
                    p3_satisfied = True
        return all([p1_satisfied,p2_satisfied,p3_satisfied])
winning_possibility = [
    WinningPossibility(1, 1, 1, 2, 1, 3),
    WinningPossibility(2, 1, 2, 2, 2, 3),
    WinningPossibility(3, 1, 3, 2, 3, 3),
    WinningPossibility(1, 1, 2, 1, 3, 1),
    WinningPossibility(1, 2, 2, 2, 3, 2),
    WinningPossibility(1, 3, 2, 3, 3, 3),
    WinningPossibility(1, 1, 2, 2, 3, 3),
    WinningPossibility(3, 1, 2, 2, 1, 3)
]

def check_win():
    for possibility in winning_possibility:
        if possibility.check('X'):  # .check проверка, что на кнопке "X"
            status_label.configure(text="X won")
            disable_game()
            return
        elif possibility.check('O'):
            status_label.configure(text="O won")
            disable_game()
            return
        if len(X_points) + len(O_points) == 9:
            status_label.configure(text="Draw")
            disable_game()

def disable_game(): # отключение игрового поля после завершения игры
    for point in XO_points:
        point.button.configure(state=tk.DISABLED) # устанавливает состояние кнопки в НЕАКТИВНО
    play_again_button.pack()

def play_again(): # новая игра по кнопке
    global current_char
    current_char = 'X'
    for point in XO_points:
        point.button.configure(state=tk.NORMAL) # возвращение кнопки в норм состояние
        point.reset()
    status_label.configure(text="X's turn")
    play_again_button.pack_forget() # .forget скрывает кнопку из интерфейса
play_again_button = tk.Button(root,text="Play again",font=('Arial',15), command=play_again)



play_area.pack(pady=10,padx=10)  # pack размещение виджетов в родительском контейнере play_area

root.mainloop()
