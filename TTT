import tkinter as tk

root  = tk.Tk()
root.resizable(False,False)
root.title("Tic Tac Toe")

#tk.Label(root, text="Tic Tac Toe", font=('Ariel', 25)).pack()

play_area = tk.Frame(root,width=300, height=300, bg='white')   #создание контейнера в котором будут храниться виджеты
status_label = tk.Label(root,text="",font=('Calibre',15), bg = 'green', fg='white')
status_label.pack(fill=tk.X) # заполняет все пространство по оси Х

current_char = "X"

XO_points = []
X_points = []
O_points = []


class XOPoints:

    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.value = None # для хранения информации о точке, занята она или нет "X O"
        self.button = tk.Button(play_area, text="", width=10, height=5, command=self.set)  #кнопка, которая будет храниться в контейнере
        self.button.grid(row=x, column=y) #располагает кнопку в сетке по координатам х и у

    def set(self): # установки значения на кнопки = текущее значение (self.value - current_char)
        global current_char
        if not self.value:
            self.button.configure(text=current_char,bg='lightblue', fg='black')
            self.value = current_char
            if current_char == "X":
                X_points.append(self) # добавляем current_char в список X_points
                current_char = "O"
                status_label.configure(text="O's turn")
                computer()
            elif current_char == "O":
                O_points.append(self)
                current_char = "X"
                status_label.configure(text="X's turn")
        check_win()


    def reset(self):  # размещает кнопки на окне, очищает текст кнопки, устанавливает значение, вызывает класс XOPoint() для опред коорд
        self.button.configure(text="", bg='white') # настройка кнопки
        if self.value == "X":
            X_points.remove(self)
        elif self.value == "O":
            O_points.remove(self)
        self.value = None # для сброса состояния или значений кнопки

for x in range(1, 4):
    for y in range(1, 4):
        XO_points.append(XOPoints(x, y))

class Win:
    def __init__(self, x1, y1, x2, y2, x3, y3):  # координаты точек, представляющие одну возможную выигрышную комбинацию
        self.x1 = x1
        self.y1 = y1
        self.x2 = x2
        self.y2 = y2
        self.x3 = x3
        self.y3 = y3

    def check(self, for_char): # проверяет выполнены ли условия для символа, переданного в for_char
        self.condition1 = False # переменные для отслеживания, выполнены ли условия для каждой из трех точек
        self.condition2 = False
        self.condition3 = False
        if for_char == 'X': # если символ = х, то
            for point in X_points: # проходим по списку, в котором хранятся позиции х
                if point.x == self.x1 and point.y == self.y1: # проверяем каждое условие на соотв координату
                    self.condition1 = True  # если координаты совпадают => устанавливаем значение True
                elif point.x == self.x2 and point.y == self.y2:
                    self.condition2 = True
                elif point.x == self.x3 and point.y == self.y3:
                    self.condition3 = True
        elif for_char == 'O': # проверка, чей символ используется, нужно проверить на наличие выигрышной комбинации
            for point in O_points:
                if point.x == self.x1 and point.y == self.y1:
                    self.condition1 = True
                elif point.x == self.x2 and point.y == self.y2:
                    self.condition2 = True
                elif point.x == self.x3 and point.y == self.y3:
                    self.condition3 = True
        return all([self.condition1,self.condition2, self.condition3]) # создает список, сод 3 условия , all() проверяет истинны ли условия != none, 0 , false, пустые

# выигрышные комбинации
wins = [
    Win(1,1, 1, 2, 1,3),
    Win(2,1, 2, 2, 2,3),
    Win(3,1, 3, 2, 3,3),
    Win(1,1, 2, 1, 3,1),
    Win(1,2, 2, 2, 3,2),
    Win(1,3, 2, 3, 3,3),
    Win(1,1, 2, 2, 3,3),
    Win(3,1, 2, 2, 1,3),
    ]

def check_win(): # проверяет есть ли выигрышные комбинации
    for combination in wins:
        if combination.check('X'): # если метод check для Х возвращает True, вывод сообщения X won
            status_label.configure(text="X won")
            color_button('X')
            disable_game()
            return
        elif combination.check('O'): # если метод check для О возвращает True, вывод сообщения O won
            status_label.configure(text="O won")
            color_button('O')
            disable_game()
            return
    if len(X_points) + len(O_points) == 9:
        status_label.configure(text="Draw")
        disable_game()


def color_button(for_char):
    for combination in wins:
        if combination.check(for_char):
            for point in X_points:
                if (point.x == combination.x1 and point.y == combination.y1 or
                    point.x == combination.x2 and point.y == combination.y2 or
                    point.x == combination.x3 and point.y == combination.y3):
                    point.button.configure(bg='blue')


def disable_game(): # отключает оставшиеся кнопки по завершению игры
    for point in XO_points:
        point.button.configure(state=tk.DISABLED) # устанавливает состояние кнопки в "выключено"
    play_again_button.pack()

def play_again():
    global current_char
    current_char = 'X'
    for point in XO_points:
        point.button.configure(state=tk.NORMAL)
        point.reset()
    status_label.configure(text="X's turn")
    play_again_button.pack_forget()

play_again_button = tk.Button(root, text="Play again", font=('Calibre',12), command=play_again)


def computer():
    # Если выигрыш компьютера возможен на следующем ходу, продолжайте и выигрывайте игру
    for i in wins: # перебирает все возможные выигрыши компа
        i.check('O') # проверяет, сколько условий для выигрыша компа
        if i.condition1 and i.condition2: # если условия 1 и 2 выполняются, выполняем 3-е
            for point in XO_points: # перебираем все точки в списке ХО_points
                if point.x == i.x3 and point.y == i.y3 and point not in X_points + O_points: # если коор совпад и клетка не занята
                    point.set() # занимаем клетку
                    return # завершаем - комп выиграл
        elif i.condition2 and i.condition3:
            for point in XO_points:
                if point.x == i.condition1 and point.y == i.y1 and point not in X_points + O_points:
                    point.set()
                    return
        elif i.condition3 and i.condition1:
            for point in XO_points:
                if point.x == i.x2 and point.y == i.y2 and point not in X_points + O_points:
                    point.set()
                    return
    # Если игрок может выиграть на следующем ходу, предотвратите это
    for i in wins:
        i.check('X')
        if i.condition1 and i.condition2:
            for point in XO_points:
                if point.x == i.x3 and point.y == i.y3 and point not in X_points + O_points:
                    point.set()
                    return
        elif i.condition2 and i.condition3:  # If condition 2 and 3 are satisfied, prevent condition 1 from being satisfied
            for point in XO_points:
                if point.x == i.x1 and point.y == i.y1 and point not in X_points + O_points:  # Find the point and make sure that it is not already occupied
                    point.set()  # Occupy point
                    return
        elif i.condition3 and i.condition1:
            for point in XO_points:
                if point.x == i.x2 and point.y == i.y2 and point not in X_points + O_points:
                    point.set()
                    return
# если центр в данный момент не занят
    center = False # занят ли центр?
    for point in X_points + O_points:
        if point.x == 2 and point.y == 2: # если найдена точка с координатой в центре
            center = True
            break # стоп
    if not center: # если центр остается False, то центр можно занять
        for point in XO_points:
            if point.x == 2 and point.y == 2:
                point.set()
                return

# если центр уже занят
    corner_points = [(1,1), (1,3), (3,1), (3,3)] # угловые точки
    middle_points = [(1,2,), (2,1), (2,3), (3,2)] # серединные точки
    count_X = 0 # счетчик угловых клеток, занятых X

    for point in X_points: #проходим по всем точкам, занятых игроком, играющем за X
        if (point.x, point.y) in corner_points: # если точка явл угловой
            count_X += 1
        # если игрок занимает 2 или более угловых точек
    if count_X >= 2: # если количество угловых точек, занятых игроком Х = или превышает 2
        for point in XO_points: # идем по всем кнопкам
            if(point.x, point.y) in middle_points and point not in X_points + O_points: #является ли точка срединной и свободна ли она
                point.set()
                return
    elif count_X < 2:
        for point in XO_points:
            if (point.x, point.y) in corner_points and point not in X_points + O_points: # угловая и свободна?
                point.set()
                return


play_area.pack(padx=10, pady=10)

root.mainloop()
